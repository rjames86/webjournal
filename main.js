// Generated by CoffeeScript 1.9.3
(function() {
  var CommentBox, FileList, Page, RenderedCommentBox, d;

  d = React.DOM;

  FileList = React.createFactory(React.createClass({
    getInitialState: function() {
      return {
        fileList: [],
        createFile: _.debounce(this.createFile, 500, true),
        selectedFile: ""
      };
    },
    newFileText: function() {
      return "Date Created: " + (new Date()) + "\n";
    },
    componentDidMount: function() {
      return this.props.dbClient.authenticate((function(_this) {
        return function(error, data) {
          return _this.props.dbClient.readdir("/", function(error, entries) {
            return _this.setState({
              fileList: entries
            });
          });
        };
      })(this));
    },
    createFile: function() {
      var currentFileList, fileName, now;
      now = (new Date()).toISOString().replace(/:/g, ".");
      fileName = now + ".txt";
      currentFileList = this.state.fileList;
      currentFileList.unshift(fileName);
      this.setState(_.extend(currentFileList, {
        selectedFile: fileName
      }));
      return this.props.dbClient.authenticate((function(_this) {
        return function(error, data) {
          return _this.props.dbClient.writeFile(fileName, _this.newFileText(), function() {
            return _this.props.onSelect(fileName);
          });
        };
      })(this));
    },
    render: function() {
      return d.ul({
        className: "list-group"
      }, d.li({
        className: "list-group-item",
        onTouchEnd: this.state.createFile,
        onClick: this.state.createFile
      }, "Create New Entry"), this.state.fileList.map((function(_this) {
        return function(entry, i) {
          var isActive;
          isActive = _this.state.selectedFile === entry ? 'active' : '';
          return d.li({
            key: i,
            onClick: function() {
              _this.setState({
                selectedFile: entry
              });
              return _this.props.onSelect(entry);
            },
            onTouchEnd: function() {
              _this.setState({
                selectedFile: entry
              });
              return _this.props.onSelect(entry);
            },
            className: "hidden-xs list-group-item " + isActive
          }, entry);
        };
      })(this)));
    }
  }));

  RenderedCommentBox = React.createFactory(React.createClass({
    render: function() {
      var raw_markup;
      raw_markup = marked(this.props.comment, {
        sanitize: true
      });
      return d.div({}, d.span({
        dangerouslySetInnerHTML: {
          __html: raw_markup
        }
      }));
    }
  }));

  CommentBox = React.createFactory(React.createClass({
    getInitialState: function() {
      return _.extend({
        userInfo: {
          name: "there"
        }
      }, this.nullState());
    },
    nullState: function() {
      return {
        uploader: _.throttle(this.uploadToDropbox, 5000),
        comment: "",
        geolocation: null,
        lastUpdated: ""
      };
    },
    getDefaultProps: function() {
      return {
        fileToLoad: ""
      };
    },
    componentDidMount: function() {
      return this.props.dbClient.authenticate((function(_this) {
        return function(error, data) {
          _this.props.dbClient.getAccountInfo(function(error, userInfo) {
            return _this.setState({
              userInfo: userInfo
            });
          });
          if (_this.props.fileToLoad) {
            _this.setState({
              comment: "Loading..."
            });
            return _this.props.dbClient.readFile(_this.props.fileToLoad, function(error, data) {
              return _this.setState(_.extend(_this.nullState(), {
                comment: data
              }), function() {
                return _this.props.setCompiledComment(_this.compileText());
              });
            });
          }
        };
      })(this));
    },
    componentWillReceiveProps: function(nextProps) {
      if (nextProps.fileToLoad !== this.props.fileToLoad) {
        this.uploadToDropbox();
        this.setState({
          comment: "Loading..."
        });
        return this.props.dbClient.authenticate((function(_this) {
          return function(error, data) {
            return _this.props.dbClient.readFile(nextProps.fileToLoad, function(error, data) {
              return _this.setState(_.extend(_this.nullState(), {
                comment: data
              }), function() {
                return _this.props.setCompiledComment(_this.compileText());
              });
            });
          };
        })(this));
      }
    },
    compileText: function() {
      var to_ret;
      to_ret = this.state.comment;
      if (this.state.geolocation) {
        to_ret = ("Location: " + this.state.geolocation.latitude + ", " + this.state.geolocation.longitude + "  \n\n") + this.state.comment;
      }
      return to_ret;
    },
    uploadToDropbox: function() {
      return this.props.dbClient.writeFile(this.props.fileToLoad, this.compileText(), (function(_this) {
        return function(error, stat) {
          return _this.setState({
            lastUpdated: stat.modifiedAt
          });
        };
      })(this));
    },
    getLocation: function() {
      if (navigator.geolocation) {
        return navigator.geolocation.getCurrentPosition((function(_this) {
          return function(position) {
            return _this.setState({
              geolocation: {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
              }
            }, function() {
              return _this.props.setCompiledComment(_this.compileText());
            });
          };
        })(this));
      }
    },
    buttonOptions: function() {
      return d.div({
        className: "btn-group",
        role: "group"
      }, this.state.geolocation ? d.button({
        type: "button",
        className: "btn btn-default",
        onClick: (function(_this) {
          return function() {
            return _this.setState({
              geolocation: null
            }, function() {
              return _this.props.setCompiledComment(_this.compileText());
            });
          };
        })(this),
        onTouchEnd: (function(_this) {
          return function() {
            return _this.setState({
              geolocation: null
            }, function() {
              return _this.props.setCompiledComment(_this.compileText());
            });
          };
        })(this)
      }, "Remove Location") : d.button({
        type: "button",
        className: "btn btn-default",
        onClick: this.getLocation,
        onTouchEnd: this.getLocation
      }, "Add Location"));
    },
    handleChange: function(e) {
      this.setState({
        comment: e.target.value
      }, (function(_this) {
        return function() {
          return _this.props.setCompiledComment(_this.compileText());
        };
      })(this));
      return this.state.uploader();
    },
    render: function() {
      return d.div({}, d.div({}, d.p({}, "Hello " + this.state.userInfo.name), d.textarea({
        cols: 80,
        rows: 20,
        onChange: this.handleChange,
        value: this.state.comment
      }), d.p({}, "Last Updated: " + this.state.lastUpdated), this.buttonOptions()));
    }
  }));

  Page = React.createClass({
    getInitialState: function() {
      return {
        currentFile: "",
        compiledComment: ""
      };
    },
    onSelect: function(file) {
      return this.setState({
        currentFile: file
      });
    },
    setCompiledComment: function(comment) {
      return this.setState({
        compiledComment: comment
      });
    },
    render: function() {
      return d.div({
        className: "row"
      }, d.div({
        className: "col-md-2"
      }, FileList({
        dbClient: this.props.dbClient,
        onSelect: this.onSelect
      })), d.div({
        className: "col-md-5"
      }, this.state.currentFile ? CommentBox({
        fileToLoad: this.state.currentFile,
        dbClient: this.props.dbClient,
        setCompiledComment: this.setCompiledComment
      }) : void 0), d.div({
        className: "col-md-5"
      }, RenderedCommentBox({
        comment: this.state.compiledComment
      })));
    }
  });

  $(function() {
    var client, element;
    client = new Dropbox.Client({
      key: ""
    });
    element = React.createElement(Page, {
      dbClient: client
    }, null);
    return React.render(element, document.getElementById('react'));
  });

}).call(this);
